###################################
# Demo Data for Testing CodeBuddy #
###################################
Assignment 1: "Calculate Factorial"
- Assignment Name: Calculate Factorial
- School Notes: Write a function `factorial(n)` that calculates the factorial of a non-negative integer `n`. The factorial of `n` is defined as `n! = n × (n-1) × ... × 1` with `0! = 1`.
- Test Cases:
  1. Input: `0`, Expected Output: `1`
  2. Input: `1`, Expected Output: `1`
  3. Input: `5`, Expected Output: `120`
  4. Input: `7`, Expected Output: `5040`
  5. Input: `10`, Expected Output: `3628800`

##### Student Submissions:
1. Student ID: `12345`  
   Code:
   ```python
   def factorial(n):
       if n == 0:
           return 1
       result = 1
       for i in range(1, n + 1):
           result *= i
       return result
   ```
   Outcome: Passes all test cases.

2. Student ID: `67890`  
   Code:
   ```python
   def factorial(n):
       if n == 0:
           return 1
       return n * n  # Incorrect logic
   ```
   Outcome: Fails test cases 3, 4, and 5.


//////////////////////////////////////////////////////////////////////////////////////////


Assignment 2: "Check Prime Number"
- Assignment Name: Check Prime Number
- School Notes: Write a function `is_prime(n)` that returns `True` if `n` is a prime number and `False` otherwise. A prime number is greater than 1 and divisible only by 1 and itself.
- Test Cases:
  1. Input: `2`, Expected Output: `True`
  2. Input: `10`, Expected Output: `False`
  3. Input: `13`, Expected Output: `True`
  4. Input: `25`, Expected Output: `False`
  5. Input: `97`, Expected Output: `True`

##### Student Submissions:
1. Student ID: `12345`  
   Code:
   ```python
   def is_prime(n):
       if n <= 1:
           return False
       for i in range(2, int(n0.5) + 1):
           if n % i == 0:
               return False
       return True
   ```
   Outcome: Passes all test cases.

2. Student ID: `54321`  
   Code:
   ```python
   def is_prime(n):
       if n < 2:
           return False
       for i in range(2, n):
           if n % i == 0:
               return False
       return True
   ```
   Outcome: Fails test case 5 due to inefficiency with large numbers.


//////////////////////////////////////////////////////////////////////////////////////////


Assignment 3: "Sum of Digits"
- Assignment Name: Sum of Digits
- School Notes: Write a function `sum_of_digits(n)` that calculates the sum of the digits of a non-negative integer `n`.
- Test Cases:
  1. Input: `123`, Expected Output: `6`
  2. Input: `0`, Expected Output: `0`
  3. Input: `4567`, Expected Output: `22`
  4. Input: `1111`, Expected Output: `4`
  5. Input: `9999`, Expected Output: `36`

##### Student Submissions:
1. Student ID: `67890`  
   Code:
   ```python
   def sum_of_digits(n):
       return sum(int(digit) for digit in str(n))
   ```
   Outcome: Passes all test cases.

2. Student ID: `54321`  
   Code:
   ```python
   def sum_of_digits(n):
       total = 0
       while n > 0:
           total += n % 10
           n //= 10
       return total
   ```
   Outcome: Passes all test cases.

---

### Summary of Data:
#### Assignments:
1. Calculate Factorial
2. Check if Number is Prime
3. Sum of Digits

#### Students:
- `12345`: Submits for Assignment 1 and Assignment 2.
- `67890`: Submits for Assignment 1 and Assignment 3.
- `54321`: Submits for Assignment 2 and Assignment 3.

This dataset should provide enough variability for testing purposes. Let me know if you need more!