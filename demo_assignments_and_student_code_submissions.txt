###################################
# Demo Data for Testing CodeBuddy #
###################################
Assignment 1: "Calculate Factorial"
- Assignment Name: Calculate Factorial
- Assignment Question: Write a function `factorial(n)` that calculates the factorial of a non-negative integer `n`. The factorial of `n` is defined as `n! = n √ó (n-1) √ó ... √ó 1` with `0! = 1`.
- Assignment Notes:
  a. A factorial is the product of all positive integers up to a given number ùëõ. For example, 5!=5√ó4√ó3√ó2√ó1=120.
  b. Factorials are commonly used in mathematical problems such as permutations, combinations, and probability calculations.
  c. Consider edge cases like 0!=1 (a special case) and 1!=1.
  d. Use a loop to iteratively multiply numbers or try recursion for advanced learning, but remember to test for large values to avoid performance issues.
  e. This assignment focuses on understanding loops, conditionals, and basic arithmetic operations in Python.
- Test Cases:
  1. Input: `0`, Expected Output: `1`
  2. Input: `1`, Expected Output: `1`
  3. Input: `5`, Expected Output: `120`
  4. Input: `7`, Expected Output: `5040`
  5. Input: `10`, Expected Output: `3628800`

##### Student Submissions:
1. Student ID: `12345`  
   Code:
   ```python
   def factorial(n):
       if n == 0:
           return 1
       result = 1
       for i in range(1, n + 1):
           result *= i
       return result
   ```
   Outcome: Passes all test cases.

2. Student ID: `67890`  
   Code:
   ```python
    def factorial(n):
        if n == 0:
            return 1
        return n * n  # Incorrect logic
   ```
   Outcome: Fails test cases 3, 4, and 5.


//////////////////////////////////////////////////////////////////////////////////////////


Assignment 2: "Check Prime Number"
- Assignment Name: Check Prime Number
- Assignment Question: Write a function `is_prime(n)` that returns `True` if `n` is a prime number and `False` otherwise. A prime number is greater than 1 and divisible only by 1 and itself.
- Assignment Notes:
  a. A prime number is greater than 1 and divisible only by 1 and itself. For example, 2,3,5,7, and 13 are prime numbers.
  b. Numbers less than or equal to 1 (e.g., 0 or ‚àí1) are not prime.
  c. The most efficient way to check for primes is to loop only up to the square root of the number instead of all the way up to ùëõ‚àí1.
  d. Emphasize the importance of testing edge cases like 2, the smallest prime number, and large values to understand the program's performance.
  e. This assignment reinforces the concepts of loops, conditionals, and modulus operations while introducing optimization techniques.
- Test Cases:
  1. Input: `2`, Expected Output: `True`
  2. Input: `10`, Expected Output: `False`
  3. Input: `13`, Expected Output: `True`
  4. Input: `25`, Expected Output: `False`
  5. Input: `97`, Expected Output: `True`

##### Student Submissions:
1. Student ID: `12345`  
   Code:
   ```python
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n0.5) + 1):
            if n % i == 0:
                return False
        return True
   ```
   Outcome: Passes all test cases.

2. Student ID: `54321`  
   Code:
   ```python
   def is_prime(n):
       if n < 2:
           return False
       for i in range(2, n):
           if n % i == 0:
               return False
       return True
   ```
   Outcome: Fails test case 5 due to inefficiency with large numbers.


//////////////////////////////////////////////////////////////////////////////////////////


Assignment 3: "Sum of Digits"
- Assignment Name: Sum of Digits
- Assignment Question: Write a function `sum_of_digits(n)` that calculates the sum of the digits of a non-negative integer `n`.
- Assignment Notes:
  a. The goal is to calculate the sum of all digits in a non-negative integer. For example, the digits of 123 are 1,2, and 3, so the sum is 6.
  b. This problem can be solved using loops or by converting the number to a string for a simpler approach.
  c. Consider edge cases like 0, where the sum of digits is 0, and numbers with multiple zeros (e.g., 1002).
  d. Focus on breaking the problem into smaller steps: extracting digits, summing them, and returning the result.
  e. This assignment strengthens understanding of loops, type conversions, and modular arithmetic.
- Test Cases:
  1. Input: `123`, Expected Output: `6`
  2. Input: `0`, Expected Output: `0`
  3. Input: `4567`, Expected Output: `22`
  4. Input: `1111`, Expected Output: `4`
  5. Input: `9999`, Expected Output: `36`

##### Student Submissions:
1. Student ID: `67890`  
   Code:
   ```python
   def sum_of_digits(n):
       return sum(int(digit) for digit in str(n))
   ```
   Outcome: Passes all test cases.

2. Student ID: `54321`  
   Code:
   ```python
   def sum_of_digits(n):
       total = 0
       while n > 0:
           total += n % 10
           n //= 10
       return total
   ```
   Outcome: Passes all test cases.

---

### Summary of Data:
#### Assignments:
1. Calculate Factorial
2. Check if Number is Prime
3. Sum of Digits

#### Students:
- `12345`: Submits for Assignment 1 and Assignment 2.
- `67890`: Submits for Assignment 1 and Assignment 3.
- `54321`: Submits for Assignment 2 and Assignment 3.
